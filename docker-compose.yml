version: '3.8'

services:
  rentman-api:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - RENTMAN_TOKEN=${RENTMAN_TOKEN}
      - RENTMAN_BASE_URL=${RENTMAN_BASE_URL:-https://www.rentman.online}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-60000}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_MAX_SIZE=${CACHE_MAX_SIZE:-100}
      - IMAGE_CDN_URL=${IMAGE_CDN_URL}
    volumes:
      - ./public/images:/app/public/images
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - rentman-network

  # Optional: Redis for caching (if you want to use external cache)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - rentman-network
    command: redis-server --appendonly yes

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - rentman-api
    restart: unless-stopped
    networks:
      - rentman-network

volumes:
  redis-data:

networks:
  rentman-network:
    driver: bridge

